<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<!-- Tiles -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>


	<!-- file upload -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- setting maximum upload size -->
		<beans:property name="maxUploadSize" value="5242880" />
	</beans:bean>

	<!-- Quartz -->
	<beans:bean id="dailyCheckJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<beans:property name="targetObject" ref="dailyCheck" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
		<beans:property name="targetMethod" value="getCouponCheckDeadline" />
		<!-- 동시 실행을 방지합니다. -->
		<beans:property name="concurrent" value="false" />
	</beans:bean>
	<beans:bean id="monthlyCheckJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<beans:property name="targetObject" ref="monthlyCheck" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
		<beans:property name="targetMethod" value="giveMonthlyCoupon" />
		<!-- 동시 실행을 방지합니다. -->
		<beans:property name="concurrent" value="false" />
	</beans:bean>
	<!-- 매일 실행 트리거(cron) -->
	<beans:bean id="dailyCheckTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<beans:property name="jobDetail" ref="dailyCheckJob" />
		<!-- CronTrigger를 사용하여 매일 00시에 실행 -->
		<beans:property name="cronExpression" value="0 0 0 * * ?" />
	</beans:bean>
	<!-- 테스트용 트리거(simple) -->
	<beans:bean id="dailyCheckTrigger2"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<beans:property name="jobDetail" ref="dailyCheckJob" />
		<!-- 시작하고 5초 후에 실행한다. (milisecond) -->
		<beans:property name="startDelay" value="5000" />
		<!-- 매 24시간마다 실행한다.864000000 (milisecond) -->
		<beans:property name="repeatInterval" value="864000000" />
	</beans:bean>
	<!-- 매달 실행 트리거(cron) -->
	<beans:bean id="giveCouponTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<beans:property name="jobDetail" ref="monthlyCheckJob" />
		<beans:property name="cronExpression" value="0 0 0 1 * ?" />
	</beans:bean>
	<!-- 테스트용 트리거(simple) -->
	<beans:bean id="giveCouponTrigger2"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<beans:property name="jobDetail" ref="monthlyCheckJob" />
		<!-- 시작하고 5초 후에 실행한다. (milisecond) -->
		<beans:property name="startDelay" value="3000" />
		<!-- 매 24시간마다 실행한다.864000000 (milisecond) -->
		<beans:property name="repeatInterval" value="864000000" />
	</beans:bean>
	<!-- 테스트용 스케줄러 -->
	<beans:bean id="jobScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<beans:property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<beans:list>
				<beans:ref bean="dailyCheckTrigger" />
<!-- 				<beans:ref bean="dailyCheckTrigger2" /> -->
				<beans:ref bean="giveCouponTrigger" />
<!-- 				<beans:ref bean="giveCouponTrigger2" /> -->
			</beans:list>
		</beans:property>
	</beans:bean>
	
	
	
	
	
	<!--  AOP 설정 -->
	<aop:aspectj-autoproxy />
	
	<context:component-scan base-package="com.team.project"></context:component-scan>
	<context:component-scan base-package="com.team.project.entities"></context:component-scan>
	<context:component-scan base-package="com.team.project.service"></context:component-scan>
	<context:component-scan base-package="com.team.project.aop"></context:component-scan>
	
	<aop:config>
	</aop:config>
	

	
</beans:beans>
